#!/usr/bin/env python
#
# Copyright 2016 Chris Cummins <chrisc.101@gmail.com>.
#
# This file is part of CLgen.
#
# CLgen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CLgen is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CLgen.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import print_function

from labm8 import fs

from clgen import cli
from clgen import features

__description__ = """
Extract static OpenCL kernel features.

This extracts a subset of the features required for the paper:

    Grewe, D., Wang, Z., & O'Boyle, M. F. P. M. (2013). Portable Mapping of
    Data Parallel Programs to OpenCL for Heterogeneous Systems. In CGO. IEEE.

Note that dynamic features are extracted using the cldrive program for CLgen
kernels, or by using libcecl for ad-hoc programs.
"""


def features_dir(csv_path):
    return fs.basename(fs.dirname(csv_path))


def main():
    parser = cli.ArgumentParser(description=__description__)
    parser.add_argument('inputs', nargs='+', help='input path(s)')
    parser.add_argument('-d', '--dir-mode', action='store_true',
                        help='treat inputs as directories')
    parser.add_argument('-s', '--stats', action='store_true',
                        help='summarize a features files')
    parser.add_argument('-e', '--fatal-errors', action='store_true',
                        help='quit on compiler error')
    parser.add_argument('--shim', action='store_true',
                        help='include shim header')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='minimal error output')
    parser.add_argument('-H', '--no-header', action='store_true',
                        help='no features header')
    args = parser.parse_args()

    inputs = args.inputs
    dir_mode = args.dir_mode
    summarise = args.stats

    if summarise:
        stats = [features.summarize(f) for f in inputs]

        print('dataset', *list(stats[0].keys()), sep=',')
        for path, stat in zip(inputs, stats):
            print(features_dir(path), *list(stat.values()), sep=',')
        return

    if dir_mode:
        trees = [fs.ls(d, abspaths=True, recursive=True) for d in inputs]
        paths = [item for sublist in trees for item in sublist]
    else:
        paths = [fs.path(f) for f in inputs]

    cli.main(features.files, paths, fatal_errors=args.fatal_errors,
             use_shim=args.shim, quiet=args.quiet, header=not args.no_header)


if __name__ == '__main__':
    main()
