#!/usr/bin/env python
#
# Copyright 2016 Chris Cummins <chrisc.101@gmail.com>.
#
# This file is part of CLgen.
#
# CLgen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CLgen is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CLgen.  If not, see <http://www.gnu.org/licenses/>.
#
from clgen import cli
from clgen import log
from clgen import dbutil
from clgen import preprocess

__description__ = """
Process OpenCL files for machine learning.

This is a three step process. First, the OpenCL kernels are compiled to
bytecode, then the source files are preprocessed, before being rewritten.

Preprocessing is computationally demanding and highly paralellised.
Expect high resource contention during preprocessing.
"""


def main():
    parser = cli.ArgumentParser(description=__description__)
    parser.add_argument('inputs', nargs='+', help='path to input')
    parser.add_argument('-f', '--file', action='store_true',
                        help='treat input as file')
    parser.add_argument('-i', '--inplace', action='store_true',
                        help='inplace file rewrite')
    parser.add_argument('--remove-bad-preprocessed', action='store_true',
                        help="""
delete the contents of all bad or ugly preprocessed files,
but keep the entries in the table""".strip())
    parser.add_argument("--remove-preprocessed", action="store_true",
                        help="remove all preprocessed files from database")
    args = parser.parse_args()

    if args.file and args.inplace:
        cli.main(preprocess.preprocess_inplace, args.inputs)
    else:
        for path in args.inputs:
            if args.file:
                cli.main(preprocess.preprocess_file, path, inplace=False)
            elif args.remove_bad_preprocessed:
                cli.main(preprocess.remove_bad_preprocessed, path)
            elif args.remove_preprocessed:
                cli.main(dbutil.remove_preprocessed, path)
                log.info("done.")
            else:
                if cli.main(preprocess.preprocess_db, path):
                    log.info("done.")
                else:
                    log.info("nothing to be done.")


if __name__ == '__main__':
    main()
