#!/usr/bin/env python
#
# Copyright 2016 Chris Cummins <chrisc.101@gmail.com>.
#
# This file is part of CLgen.
#
# CLgen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CLgen is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CLgen.  If not, see <http://www.gnu.org/licenses/>.
#
from clgen import cli
from clgen.train import train

__description__ = """
Create training datasets.

Provides a front-end for utilities for turning kernel databases into corpuses
for training CLgen models on.
"""


def main():
    parser = cli.ArgumentParser(description=__description__)
    parser.add_argument('input', help='path to SQL input dataset')
    parser.add_argument('output', help='path to output file or directory')
    parser.add_argument('-d', action='store_true', default=False,
                        help='output to directory (overrides -i, --eof, -r)')
    parser.add_argument('-i', action='store_true', default=False,
                        help='include file separators')
    parser.add_argument('--input-samples', action='store_true',
                        default=False,
                        help='use input contents, not preprocessed')
    parser.add_argument('--eof', action='store_true', default=False,
                        help='print end of file')
    parser.add_argument('-r', action='store_true', default=False,
                        help='use reverse order')
    parser.add_argument('-s', '--status', type=int, default=0,
                        help='status code to use')
    args = parser.parse_args()

    db_path = args.input
    out_path = args.output
    opts = {
        "dir": args.d,
        "eof": args.eof,
        "fileid": args.i,
        "input_samples": args.input_samples,
        "reverse": args.r,
        "status": args.status
    }

    cli.main(train, db_path, out_path, **opts)


if __name__ == '__main__':
    main()
