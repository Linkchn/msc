#!/usr/bin/env python
#
# Copyright 2016 Chris Cummins <chrisc.101@gmail.com>.
#
# This file is part of CLgen.
#
# CLgen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CLgen is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CLgen.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import print_function

import os

from labm8 import fs
from sys import exit, stderr

import pyopencl as cl

import clgen
from clgen import cli
from clgen import cldrive
from clgen import log

__description__ = """
Drive OpenCL kernels.

For each kernel, generate a randomly sized payload and execute.
Use environment variable 'DSIZE' to override random payload size.

Program output is in CSV format, with the following scheme:

    <path>,<dsize>,<kernel>,<transfer>,<mean>,<ci>

where each value corresponds to:

   <path>      path to input file
   <dsize>     payload size
   <kernel>    kernel name
   <transfer>  transfer size, in bytes
   <mean>      mean execution time
   <ci>        95% confidence interval of execution time

In case of an error, "-" is output for values which cannot be determined,
and the kernel name field is substituted for an error name.
"""


def main():
    parser = cli.ArgumentParser(description=__description__)
    parser.add_argument('inputs', metavar="<input>", nargs='+',
                        help='input file(s) or directories')
    parser.add_argument('-s', '--strict', action='store_true', default=False,
                        help='reject any kernels which do not validate')
    parser.add_argument('--cpu', action='store_true', default=False,
                        help='execute on CPU (default: no)')
    parser.add_argument('--gpu', action='store_true', default=False,
                        help='execute on GPU (default: yes)')
    parser.add_argument('--fatal-errors', action="store_true", default=False,
                        help="exit on error")
    args = parser.parse_args()

    if 'DSIZE' in os.environ:
        dsize = int(os.environ['DSIZE'])
        size = dsize
    else:
        size = None

    devtype = cl.device_type.CPU if args.cpu else cl.device_type.GPU

    kwargs = {
        "size": size,
        "devtype": devtype,
        "must_validate": args.strict,
        "fatal_errors": args.fatal_errors
    }

    # check first that arguments exist
    for path in args.inputs:
        if not fs.exists(path):
            log.fatal("input not found:", path)

    file_iterator(args.inputs, kwargs)


def file_iterator(paths, kwargs):
    """recursively evalute files"""
    for path in paths:
        if fs.isfile(path):   # file
            cli.main(cldrive.file, fs.abspath(path), **kwargs)
        elif fs.isdir(path):  # directory, recurse
            contents = [x for x in fs.ls(path, abspaths=True, recursive=True)
                        if fs.isfile(x)]
            file_iterator(contents, kwargs)
        else:
            log.fatal("i have no idea what to do with argument", path)


if __name__ == '__main__':
    main()
